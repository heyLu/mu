.v0.1.0

- published before 10th of july 2015
- a readme, with mostly just comments about having fun with this
    - i.e. it's very much a non-production thing, for fun & tiny projects

.next

- some ideas
  - tests!  (we really need those, at least "api-level" tests, that
    ensure our public interfaces don't break.  unused things tend
    to break, for example the `file` backend does not support
    mu.CreateDatabase ...)
    - txs  (validation, uniqueness, tempid resolution, redundant
      datoms, schema validation/modification)
    - index  (sort order, iterator "bounds")
    - connection  (fails if not existing, multiple dbs, values
      persisted)
  - `db.AsOf(...)`
  - `mu.EntidAt(...)`  (maybe as `EntidAtT`, `EntidAtTime` and
    `EntidAtTx` variants?  although an interface would be
    preferred, but that would only be possible via wrapping.)
  - indexing  (the log tail just growing bigger doesn't seem so nice)
  - use it somewhere ...  (maybe something to replace pinboard with?)
  - the log could be written without parsing it again, by simply
    appending the new `LogTx` to it.  (this will only work if we
    can ensure the order in which we write a map.)
- mu api
    - iterators should support .Reverse
- tests for transactions (is it usable for simple things already?)
    - maybe write a backend for `gol`?  (or a simpler note taking thing.)
      (would need id generation, though.)
- support for the `log` in the `file` backend
- a real program using `mu`
    - first step: note taking
    - after that: attaching more data to the notes
- compress db files in the `file` backend by default (disable with `&compress=false`)
    - maybe do this in `fressian`, instead of here?  e.g. `NewWriterWithCompress` or similar?  (`NewGzipWriter` sounds better...)
- notes
    - add a `server` subcommand (a smallish http server that provides an api and a simple web interface)
- mu cli
    - `init` (initialize a db with the default datoms, possibly do this automatically?)
    - `datoms`, `seek-datoms` (specify index and leading components, get datoms)
        - maybe this should be the default command, like `eavt` is now?
    - `q` (or `query`) (possibly later)
    - `transact` (read tx from edn on stdin, report results)

.log

- transaction validation
- reading tx data from edn
- first attempts at creating new dbs with log & segments
- better transactions ((mostly) typed interface)
- realization how the merging of in-memory and persisted index works
- a simple note taking example application
- transactions (entity & tx id generation, used in the note taking example)
- simple transactions (no id generation, just cardinality one attributes)
- `file` backend (serializing the db to a file using fressian)
