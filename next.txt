.v0.1.0

- published before 10th of july 2015
- a readme, with mostly just comments about having fun with this
    - i.e. it's very much a non-production thing, for fun & tiny projects

.next

- some more ideas
  - fix tempid (make Id consist of partition + id), use it
  - add a `bolt` backend
  - no stores by default (?)
  - more of the query api (rules, bindings, functions/predicates)
  - pull api
  - think about:
    - make the api untyped?  (or provide helpers?)
      - in general, the api needs some sketches & experiments
      - "untyped" could mean pseudo-types (aliases for `interface{}`)
        and panic'ing if unsupported types are passed.  however, this
        would be very unidiomatic, and not really fun to develop.  if
        we do this we might as well use "dynamically typed go", but
        then we're building an ad-hoc, bug-ridden, slow implementation
        of clojure.  so maybe not?  but still... it would give us a
        more convenient interface.

        well, the summary is still "need some sketches & experiments",
        as detailed above.
- some ideas
  - tests!  (we really need those, at least "api-level" tests, that
    ensure our public interfaces don't break.  unused things tend
    to break, for example the `file` backend does not support
    mu.CreateDatabase ...)
    - txs  (validation, uniqueness, tempid resolution, redundant
      datoms, schema validation/modification)
    - index  (sort order, iterator "bounds")
    - connection  (fails if not existing, multiple dbs, values
      persisted)
  - indexing  (the log tail just growing bigger doesn't seem so nice)
  - use it somewhere ...  (maybe something to replace pinboard with?)
  - the log could be written without parsing it again, by simply
    appending the new `LogTx` to it.  (this will only work if we
    can ensure the order in which we write a map.)
  - replace the `file` backend with `bolt` (or `sqlite`).  (both
    would store the entire db in a single file, and would not require
    workarounds as `file` does.)
  - a better api for iterating over indexes
    - iterators are cumbersome to create, they always need full
      datoms as input, a kind of flexibility that we don't always
      need
    - also, ensure that the sorting changes (highest tx first) did
      not produce problems elsewhere
  - port pull api and query implementation from datascript, to get
      to "feature completeness" sooner
- mu api
    - iterators should support .Reverse
- tests for transactions (is it usable for simple things already?)
    - maybe write a backend for `gol`?  (or a simpler note taking thing.)
      (would need id generation, though.)
- support for the `log` in the `file` backend
- a real program using `mu`
    - first step: note taking
    - after that: attaching more data to the notes
- compress db files in the `file` backend by default (disable with `&compress=false`)
    - maybe do this in `fressian`, instead of here?  e.g. `NewWriterWithCompress` or similar?  (`NewGzipWriter` sounds better...)
- notes
    - add a `server` subcommand (a smallish http server that provides an api and a simple web interface)
- mu cli improvements (better help, better support for `create-database`, ...)

.log

- proper support for ref-typed attributes
- simple (conjunctive) queries
- transaction validation
- reading tx data from edn
- first attempts at creating new dbs with log & segments
- better transactions ((mostly) typed interface)
- realization how the merging of in-memory and persisted index works
- a simple note taking example application
- transactions (entity & tx id generation, used in the note taking example)
- simple transactions (no id generation, just cardinality one attributes)
- `file` backend (serializing the db to a file using fressian)
